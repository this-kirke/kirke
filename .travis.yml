
language: c

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps

jobs:
  include:
    # GCC 10
    - name: GCC-10
      os: linux
      dist: bionic
      env: CC=gcc-10 CXX=g++-10
      addons: &gcc10
        apt:
          sources:
          - sourceline: ppa:ubuntu-toolchain-r/test
          packages:
          - g++-10
      before_install:
        - pip install --user cpp-coveralls
        - export PATH="$HOME/.local/bin:$PATH"
      before_script:
        - CMAKE_GEN_FLAGS+=("-Wdev -Werror=dev --warn-uninitialized -DKIRKE_BUILD_TESTS=ON -DKIRKE_BUILD_COVERAGE_REPORT=ON" )
        - mkdir build && cd build
      script:
        - cmake .. ${CMAKE_GEN_FLAGS[@]:?}
        - cmake --build .
        - ./test__all -s
      after_success:
        - coveralls --gcov gcov-10 --root .. --build-root . --exclude 3rdParty --exclude-pattern ".*include" --exclude-pattern ".*test"

    # Clang 10
    - name: Clang-10
      os: linux
      dist: bionic
      env: CC=clang-10 CXX=clang++-10
      addons: &clang10
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
            key_url: https://apt.llvm.org/llvm-snapshot.gpg.key
          packages:
          - clang-10
        before_install:
          - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
          - mkdir -p "${DEPS_DIR:?}" && cd "${DEPS_DIR:?}"
          - mkdir -p ~/tools && cd ~/tools
        install:
          ############################################################################
          # [linux]: Install the right version of libc++
          # Based on https://github.com/ldionne/hana/blob/master/.travis.yml
          ############################################################################
          - |
            LLVM_INSTALL=${DEPS_DIR:?}/llvm/install
            # if in linux and compiler clang and llvm not installed
            if [[ "${TRAVIS_OS_NAME:?}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL:?})" ]]; then
              if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
              elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
              elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
              elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
              fi
              LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
              LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
              LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
              mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
              travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
              travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
              travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
              (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
              (cd llvm/build/projects/libcxx && make install -j2)
              (cd llvm/build/projects/libcxxabi && make install -j2)
              export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
              export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
              export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
            fi
      before_script:
        - CMAKE_GEN_FLAGS+=("-Wdev -Werror=dev --warn-uninitialized -DKIRKE_BUILD_TESTS=ON" )
        - mkdir build && cd build
      script:
        - cmake .. ${CMAKE_GEN_FLAGS[@]:?}
        - cmake --build .
        - ./test__all -s

    # Xcode 12.0
    - name: AppleClang Xcode-12.0
      os: osx
      osx_image: xcode12
      before_script:
        - CMAKE_GEN_FLAGS+=("-Wdev -Werror=dev --warn-uninitialized -DKIRKE_BUILD_TESTS=ON" )
        - mkdir build && cd build
      script:
        - cmake .. ${CMAKE_GEN_FLAGS[@]:?}
        - cmake --build .
        - ./test__all -s
